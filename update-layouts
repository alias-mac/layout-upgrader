#!/usr/bin/env php
<?php

/*
 * Copyright (c) 2008-2013 Filipe Guerra
 * https://github.com/alias-mac/layout-upgrader
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * @file
 * This script helps updating the current layout metadata for SugarCRM 7.0.
 * Please read more about it here:
 * https://github.com/alias-mac/layout-upgrader#readme
 */

// confirm we are running this using the cli
if (php_sapi_name() !== "cli") {
    throw new \RuntimeException("This is only supported from the terminal");
}

if (version_compare(PHP_VERSION, '5.3.', '<')) {
    throw new \RuntimeException("This script requires php 5.3.0 version or above.");
}

process($argv);

/**
 * Process this command with the options passed on the CLI.
 */
function process($argv)
{

    // f maps to file, d to dir, p to path, h to helper and v is verbose
    $shortOpts = "f::d::p::hv";
    $longOpts = array(
        "file::",
        "dir::",
        "path::",
        "license::",
        "help",
        "dry-run",
    );
    $opts = getopt($shortOpts, $longOpts);

    // try to get the required options (a directory or a file)
    if (!empty($opts['d'])) {
        $dirs = $opts['d'];
    }
    if (!empty($opts['dir'])) {
        $dirs = $opts['dir'];
    }
    if (!empty($opts['f'])) {
        $files = $opts['f'];
    }
    if (!empty($opts['file'])) {
        $files = $opts['file'];
    }

    // no required arguments given or help requested
    if ((empty($files) && empty($dirs)) || isset($opts['h']) || isset($opts['help'])) {
        displayHelp($argv[0]);
        exit(0);
    }

    // the sugar root path from where we want to include the helpers
    // defaults to current directory
    $path = getcwd();

    // try to get the path on the options
    if (!empty($opts['p'])) {
        $path = $opts['p'];
    }
    if (!empty($opts['path'])) {
        $path = $opts['path'];
    }

    // do a small check on the current SugarCRM path to prevent mistakes
    if (!file_exists("$path/sugar_version.php")) {
        throw new \RuntimeException(
            sprintf(
                "Path '%s' is not of a valid sugar root to run this script.",
                $path
            )
        );
    }

    // prepare to pretend we are in sugar directory (will be restored after)
    $origDir = getcwd();
    chdir($path);

    // make sure we can pretend we are a valid sugar entry point
    if (!defined('sugarEntry')) {
        define('sugarEntry', true);
    }

    // make sure SugarConfig object is available
    require_once 'include/SugarObjects/SugarConfig.php';
    // autoloader is our friend
    require_once 'include/utils/autoloader.php';
    \SugarAutoLoader::init();

    $converterOptions = array(
        'dryRun' => isset($opts['dry-run']),
        'verbose' => isset($opts['v']),
    );
    if (!empty($opts['license'])) {
        $converterOptions['licensePath'] = $opts['license'];
    }
    $converter = new Layout_Converter($converterOptions);

    // file param given (can be an array)
    if (!empty($files)) {
        $converter->addFiles($files);
    }

    // dir param given (can be an array)
    if (!empty($dirs)) {

        if (!is_array($dirs)) {
            $dirs = array($dirs);
        }
        foreach ($dirs as $dir) {
            $dir = rtrim($dir, '/');
            $files = glob("$dir/*/*.php", GLOB_NOSORT | GLOB_BRACE);
            if ($files === false) {
                throw new \RuntimeException(
                    sprintf(
                        "Unable to search for metadata layout files on given path: '%s'.",
                        $dir
                    )
                );
            }

            $converter->addFiles($files);
        }
    }

    $converter->run();

    echo "Metadata updated.\n";
    echo "Please remove all your '.orig'. If deployed in production those files will be publicly visible.\n\n";
// restore to our original directory
    chdir($origDir);

}

/**
 * Displays/prints help on the CLI.
 *
 * @param string $scriptName the script name for this command.
 */
function displayHelp($scriptName)
{
    echo <<<HELP
usage:  $scriptName [-p="path/to/sugarcrm"] -d="directory/to/convert" --dry-run
        $scriptName [-path="path/to/sugarcrm"] -d="directory/to/convert" -d="directory2/to/convert"
        $scriptName [-path="path/to/sugarcrm"] -d="directories/*/to/*/convert"
        $scriptName [-path="path/to/sugarcrm"] --dir="directory/to/convert"
        $scriptName [-p="path/to/sugarcrm"] -f="file/to/convert"
        $scriptName [-path="path/to/sugarcrm"] --file="file/to/convert"
        $scriptName [-path="path/to/sugarcrm"] --file="file/to/convert" -v
        $scriptName [-path="path/to/sugarcrm"] -f="file1/to/convert" -f="file2/to/convert"
        $scriptName [-path="path/to/sugarcrm"] -d="directories/*/to/*/convert" --license=path/to/license/file

Files and/or directories to convert need to be relative to SugarCRM path.

HELP;

}

/**
 * Class Converter to help this script to run a lot easier.
 *
 * Can't use namespaces in order to be able to use script header and use the
 * download/execute functionality.
 */
class Layout_Converter
{
    /**
     * @var bool TRUE if we don't want to convert (tests conversion only).
     * Defaults to FALSE.
     */
    protected $dryRun = false;
    /**
     * @var bool TRUE if you want to be verbose on the converter.
     * Defaults to FALSE.
     */
    protected $verbose = false;
    /**
     * @var string Path for the license header (to prepend on metadata files).
     */
    protected $licensePath;
    /**
     * @var array of files to be converted
     */
    protected $files = array();

    /**
     * Creates a converter based on a configuration given.
     *
     * @param array $config (optional) configuration for this converter.
     * The possible configuration values are:
     *   - (boolean) dryRun TRUE if you want to just test the conversion only.
     *   - (boolean) verbose TRUE if you want to show conversion messages.
     *
     * @throws \InvalidArgumentException if configuration given doesn't match the expected
     */
    public function __construct(array $config = array())
    {
        if (empty($config)) {
            return $this;
        }

        static $map = array(
            'dryRun' => 'bool',
            'verbose' => 'bool',
            'licensePath' => 'string',
        );

        foreach ($map as $param => $type) {
            if (!settype($config[$param], $type)) {
                throw new \InvalidArgumentException(
                    sprintf("Invalid configuration option '%s' given.", $param)
                );
            }
            $this->$param = $config[$param];
        }

        return $this;
    }

    /**
     * Add a file to be converted.
     *
     * @param string|array $files the file to be converted.
     *
     * @return \Layout_Converter the current instance (for chaining).
     *
     * @throws \InvalidArgumentException if one of the files isn't a metadata
     *   (PHP) file.
     * @throws \RuntimeException if one of the files given doesn't exist or if
     *   we don't have enough permissions to convert that given file.
     *
     * @api
     */
    public function addFiles($files)
    {
        // support mixed (array and string)
        if (!is_array($files)) {
            $files = array($files);
        }

        foreach ($files as $file) {
            $this->addFile($file);
        }
    }

    /**
     * Add a file to be converted.
     *
     * @param string $file the file to be converted.
     *
     * @return \Layout_Converter the current instance (for chaining).
     *
     * @throws \InvalidArgumentException if the file isn't a metadata (PHP)
     *   file or wrong argument given.
     * @throws \RuntimeException if the file given doesn't exist or if we don't
     *   have enough permissions to run the converter in this file.
     */
    protected function addFile($file)
    {
        if (empty($file) || !is_string($file)) {
            throw new \InvalidArgumentException();
        }
        $pathInfo = pathinfo($file);
        if (empty($pathInfo['extension']) || $pathInfo['extension'] !== 'php') {
            throw new \InvalidArgumentException(
                sprintf(
                    "File '%s' given isn't a valid metadata (.php) file.",
                    $file
                )
            );
        }

        if (!is_readable($file) || !is_writable($file)) {
            throw new \RuntimeException(
                sprintf(
                    "File '%s' doesn't exist or doesn't have the correct permissions (read and write).",
                    $file
                )
            );
        }

        if (!is_writable($pathInfo['dirname'])) {
            throw new \RuntimeException(
                sprintf("Directory '%s' isn't writable.", $pathInfo['dirname'])
            );
        }

        // this prevents duplicates in an easy way
        $this->files[$file] = true;
        $this->log("File '%s' added to the conversion queue.", $file);

        return $this;
    }

    /**
     * Logs a message to stdoutput if verbose is active.
     *
     * @param string $format see sprintf function
     * @param mixed $args [optional] see sprintf function
     * @param mixed $_ [optional] see sprintf function
     *
     * @see sprintf() for params info
     */
    private function log($format, $args = null, $_ = null)
    {
        if ($this->verbose) {
            echo call_user_func_array('sprintf', func_get_args()) . "\n";
        }
    }

    /**
     * Run the converter against all files previously added.
     *
     * @throws \RuntimeException if no files were given to this converter or if
     * license path supplied isn't readable.
     *
     * @api
     */
    public function run()
    {
        if (empty($this->files)) {
            throw new \RuntimeException("No files to convert. Check your script!");
        }

        if (!empty($this->licensePath)) {
            if (!is_readable($this->licensePath)) {
                throw new \RuntimeException(
                    sprintf("Unable to read license file '%s'.", $this->licensePath)
                );
            }
            $this->log(
                sprintf("License file '%s' will be appended.", $this->licensePath)
            );
        }

        foreach ($this->getFiles() as $file) {
            $this->convert($file);
        }
    }

    /**
     * Returns the list of files that will be converted.
     *
     * @return array the list of files to convert.
     */
    public function getFiles()
    {
        return array_keys($this->files);
    }

    /**
     * Converts a layout file into metada only.
     *
     * Reads the file and converts into a metada only (php array) definition.
     * This is a protected method, therefore we already know that the file
     * exists and that we have all correct permissions when reach this
     * function.
     * This will try to be unstoppable!
     *
     * If you override this class and use this in some other way, you should
     * validate if the `$file` exists and if you have permissions to do a
     * backup.
     *
     * @param string $file the file to be converted.
     *
     * @throws \RuntimeException if unable to create the backup file.
     */
    protected function convert($file)
    {
        // the viewdefs should be returned on the file ... but since they aren't...
        include $file;

        if (empty($viewdefs)) {
            // warn about empty view defs
            $message = sprintf(
                "Your viewdefs for '%s' are empty. Please confirm the conversion.\n",
                $file
            );
            trigger_error($message, E_USER_WARNING);
            $this->log($message);
            // and do nothing
            return;
        }

        $backup = "$file.orig";

        if (!file_exists($backup)) {

            if (!$this->dryRun) {
                if (!copy($file, $backup)) {
                    throw new \RuntimeException(
                        sprintf("Unable to backup file '%s'.", $file)
                    );
                }
                $this->log("Backup created in '%s'.", $backup);
            }
        } else {
            $this->log("Backup already existed at '%s'. Not overridden.", $backup);
        }

        // clean up variable to look like what we want it to be
        // e.g. $viewdefs[Accounts]['mobile']['layout']['create']

        $pathArr = explode(DIRECTORY_SEPARATOR, pathinfo($file, PATHINFO_DIRNAME));

        // default (global) layouts are defined by:
        // clients/<client>/layouts/<meta>/<meta>.php
        $level = 3;
        if (reset($pathArr) !== 'clients') {
            // module layouts are defined by:
            // <module>/clients/<client>/layouts/<meta>/<meta>.php
            $level = 4;
        }

        $content = $this->flatVarExport('$viewdefs', $viewdefs, null, $level);
        // clean the default numeric keys
        $content = preg_replace('/[0-9]+\s+=>\s+/', '', $content);

        $header = '';
        if (!empty($this->licensePath) && is_readable($this->licensePath)) {
            $header = file_get_contents($this->licensePath);
            if ($header === false) {
                throw new \RuntimeException(
                    sprintf("Unable to load '%s' file.", $this->licensePath)
                );
            }
        }
        $content = "<?php\n\n$header\n$content\n";

        if (!$this->dryRun) {
            if (file_put_contents($file, $content, LOCK_EX) === false) {
                throw new \RuntimeException(
                    sprintf("Unable to write on metadata file: '%s'.", $file)
                );
            }
            $this->log("File '%s' written.", $file);
        }
    }

    /**
     * Flattens an array definition for readability.
     *
     * This is a little bit faster (and more readable code) than
     * override_value_to_string_recursive2.
     * Also solves the problem of saving empty arrays.
     *
     * @param string $name the variable name you want to print out.
     * @param mixed $value the value of this variable (if you pass an array it
     * will be flatten).
     * @param callable $ignore pass a function that returns true when
     * we need to ignore the value.
     * Examples:
     * <li>ignoring empty values
     * <code>
     *   flatVarExport('$example', array(
     *       'foo' => 0,
     *       'bar' => null,
     *   ), function(value) { return empty($value); });
     * </code>
     * </li>
     * <li>ignoring null values
     * <code>
     *   flatVarExport('$example', array(
     *       'foo' => 0,
     *       'bar' => null,
     *   ), function(value) { return is_null($value); });
     * </code>
     * </li>
     * @param int $level (optional) the level up to we want to print it flat.
     *
     * @return string
     *
     * @see override_value_to_string_recursive2()
     */
    protected function flatVarExport($name, $value, $ignore = null, $level = null)
    {
        $str = '';
        if (!is_array($value) || $level === 0) {
            if (is_callable($ignore) && call_user_func($ignore, $value)) {
                // ignores the value
                return;
            }

            $str .= "$name = " . var_export($value, true) . ";\n";
            return $str;
        }

        // empty array
        if (empty($value)) {
            $str .= "$name = array();\n";
        }
        if (isset($level)) {
            $level = $level - 1;
        }
        foreach ($value as $key => $val) {
            $str .= $this->flatVarExport($name . "['" . $key . "']", $val, $ignore, $level);
        }
        return $str;
    }

}
